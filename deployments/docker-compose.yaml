version: '3.7'
services:
  reverse-proxy:
    image: traefik:v2.3
    restart: always
    command:
      - "--entryPoints.api.address=:80"
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - --accesslog=true
      - --tracing=true
      - --tracing.jaeger=true
      - --tracing.jaeger.traceContextHeaderName=request-trace-id
      - --tracing.jaeger.collector.endpoint=http://jaeger:14268/api/traces?format=jaeger.thrift
      - --tracing.jaeger.gen128Bit
      - --tracing.jaeger.samplingParam=1.0
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  chat-room:
    build:
      context: ../
      dockerfile: ../chat-app/build/docker/Dockerfile  
    restart: always
    expose:
      - 3000
    command:
      - room
    environment:
      ROOM_HTTP_SERVER_PORT: 3000
      ROOM_HTTP_SERVER_MAXCONN: 2000
      ROOM_GRPC_CLIENT_SUBSCRIBER_ENDPOINT: reverse-proxy:80
      REDIS_PASSWORD: redis_cluster_password
      REDIS_ADDRS: redis-node-0:6379,redis-node-1:6379,redis-node-2:6379,redis-node-3:6379,redis-node-4:6379,redis-node-5:6379
      REDIS_EXPIRATIONHOUR: "24"
      KAFKA_ADDRS: kafka:9092
      KAFKA_VERSION: 3.6.0
      CASSANDRA_HOSTS: cassandra
      CASSANDRA_PORT: 9042
      CASSANDRA_USER: billy
      CASSANDRA_PASSWORD: p@ssword
      OBSERVABILITY_PROMETHEUS_PORT: 8080
      OBSERVABILITY_TRACING_URL: jaeger:14268
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chat-room.rule=PathPrefix(`/api/rooms`)"
      - "traefik.http.routers.chat-room.entrypoints=api"
      - "traefik.http.routers.chat-room.service=chat-room"
      - "traefik.http.services.chat-room.loadbalancer.server.port=3000"
    depends_on:
      - zookeeper
      - kafka
  subscriber:
    build:
      context: ../
      dockerfile: ./build/docker/Dockerfile
    restart: always
    expose:
      - 4000
    command:
      - subscriber
    environment:
      SUBSCRIBER_GRPC_SERVER_PORT: 4000
      KAFKA_ADDRS: kafka:9092
      KAFKA_VERSION: "3.6.0"
      KAFKA_SUBSCRIBER_CONSUMERGROUP: subscriber_consumer_group
      # Manual partition based on roomID
      KAFKA_SUBSCRIBER_NUMPARTITION: -1
      REDIS_PASSWORD: redis_cluster_password
      REDIS_ADDRS: redis-node-0:6379,redis-node-1:6379,redis-node-2:6379,redis-node-3:6379,redis-node-4:6379,redis-node-5:6379
      REDIS_EXPIRATIONHOUR: "24"
      OBSERVABILITY_PROMETHEUS_PORT: 8080
      OBSERVABILITY_TRACING_URL: jaeger:14268
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.subscriber-grpc.rule=Headers(`content-type`,`application/grpc`) && Headers(`service-id`, `subscriber`)"
      - "traefik.http.routers.subscriber-grpc.entrypoints=api"
      - "traefik.http.routers.subscriber-grpc.service=subscriber-grpc"
      - "traefik.http.services.subscriber-grpc.loadbalancer.server.port=4000"
      - "traefik.http.services.subscriber-grpc.loadbalancer.server.scheme=h2c"
    depends_on:
      - zookeeper
      - kafka    
  cassandra:
    image: docker.io/bitnami/cassandra:latest
    restart: always
    volumes:
      - cassandra_data:/bitnami
      - ./room/cassandra:/docker-entrypoint-initdb.d
    environment:
      - CASSANDRA_SEEDS=cassandra
      - CASSANDRA_PASSWORD_SEEDER=yes
      - CASSANDRA_USER=billy
      - CASSANDRA_PASSWORD=p@ssword
  redis-node-0:
    image: docker.io/bitnami/redis-cluster:7.0
    restart: always
    volumes:
      - redis-cluster_data-0:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis_cluster_password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'

  redis-node-1:
    image: docker.io/bitnami/redis-cluster:7.0
    restart: always
    volumes:
      - redis-cluster_data-1:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis_cluster_password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'

  redis-node-2:
    image: docker.io/bitnami/redis-cluster:7.0
    restart: always
    volumes:
      - redis-cluster_data-2:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis_cluster_password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'

  redis-node-3:
    image: docker.io/bitnami/redis-cluster:7.0
    restart: always
    volumes:
      - redis-cluster_data-3:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis_cluster_password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'

  redis-node-4:
    image: docker.io/bitnami/redis-cluster:7.0
    restart: always
    volumes:
      - redis-cluster_data-4:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis_cluster_password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'

  redis-node-5:
    image: docker.io/bitnami/redis-cluster:7.0
    restart: always
    volumes:
      - redis-cluster_data-5:/bitnami/redis/data
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
    environment:
      - 'REDIS_PASSWORD=redis_cluster_password'
      - 'REDISCLI_AUTH=redis_cluster_password'
      - 'REDIS_CLUSTER_REPLICAS=1'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
      - 'REDIS_CLUSTER_CREATOR=yes'    
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181   
  kafka:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    environment:
      KAFKA_LOG_RETENTION_MINUTES: 1440 # 24hrs
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
  prometheus:
    image: prom/prometheus:v2.45.0
    restart: always
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    command: 
      - --config.file=/etc/prometheus/prometheus.yaml
      - --enable-feature=exemplar-storage
    ports:
      - 9090:9090
  jaeger:
    image: jaegertracing/all-in-one:1.22
    restart: always
    ports:
      - 14268:14268
      - 16686:16686
      
volumes:
  cassandra_data:
  redis-cluster_data-0:
  redis-cluster_data-1:
  redis-cluster_data-2:
  redis-cluster_data-3:
  redis-cluster_data-4:
  redis-cluster_data-5:
